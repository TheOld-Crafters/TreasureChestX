name: Java CI

on:
  push:
    branches:
    - master
    paths:
    - 'src/**'
    - 'pom.xml'
  pull_request:
    branches:
    - master
    paths:
    - 'src/**'
    - 'pom.xml'

jobs:
  pull_check:
    
    name: Pull request build
    runs-on: ubuntu-latest
    if: github.event == 'pull_request'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v1
    - name: Set up JDK 17
      uses: actions/setup-java@v2.5.0
      with:
        java-version: 17
        distribution: 'adopt'
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - name: Build with Maven
      run: mvn package --file pom.xml
  build-release:
    name: Build and Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - uses: s4u/maven-settings-action@v2.2.0
    - name: Checkout repository
      uses: actions/checkout@v1
    
    - name: Set up JDK 17
      uses: actions/setup-java@v2.5.0
      with:
        java-version: 17
        distribution: 'adopt'
    
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - name: Set outputs
      id: vars
      run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
    - name: Check outputs
      run: echo ${{ steps.vars.outputs.sha_short }}
    
    - name: Build with Maven
      run: |
        mvn -B versions:set -DnewVersion="${{ steps.vars.outputs.sha_short }}" -DgenerateBackupPoms=false
        mvn package --file pom.xml
    - name: Create Release
      id: create_release
      uses: actions/create-release@latest
      if: "! contains(toJSON(github.event.head_commit.message), '[CI skip]')"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ steps.vars.outputs.sha_short }}
        release_name: ${{ github.event.head_commit.message }} (git ${{ steps.vars.outputs.sha_short }})
        body: |
          This is an automatic release. Every time a new commit is pushed to this repository, a new release will be created.
          _by poma123_
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@latest
      if: "! contains(toJSON(github.event.head_commit.message), '[CI skip]')"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./target/TreasureChest-${{ steps.vars.outputs.sha_short }}.jar
        asset_name: TreasureChest-${{ steps.vars.outputs.sha_short }}).jar
        asset_content_type: application/java-archive
